#!/bin/bash
#########################################################
# 							#
# This is BashStyle-NG  				#
#							#
# Licensed under GNU GENERAL PUBLIC LICENSE v3    	#
#							#
# Copyright 2007 - 2019 Christopher Bratusek		#
#							#
#########################################################

. gettext.sh
TEXTDOMAIN="bashstyle-rc"

export BSNG_PREFIX=@PREFIX@
export BSNG_DATADIR=@DATADIR@
export BSNG_RCDIR=${BSNG_DATADIR}/bashstyle-ng/rc
export BSNG_VERSION=@VERSION@
export BSNG_YEAR="2007 - 2019"
export BSNG_BASHVER=${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}
export BSNG_LOGFILE=${HOME}/.bashstyle-ng.log
export BSNG_SESSION_TIME=$(date +%I-%M-%S-%N)
export BASH_SESSION_PID=$$
INI_VERSION=37

export PATH="${PATH}:${BSNG_EXECDIR}"

if [[ ! -z "${TMPDIR}" ]]; then
	export BSNG_TMPDIR=${TMPDIR}
elif [ -w /var/tmp ]; then
	export BSNG_TMPDIR=/var/tmp
elif [ -w /tmp ]; then
	export BSNG_TMPDIR=/tmp
else
	echo "unable to set BSNG_TMPDIR!"
fi

alias bt="check bt"
alias bf="check bf"

for module in ini log cd colorshell colorshell_reset history \
	history_sync reload_bash remember_command_debug trap_add \
	remember_command_error remember_directory remove_tempfile; do
	source ${BSNG_RCDIR}/function_${module}
done

dbg_log rm -f "${BSNG_LOGFILE}"
dbg_log touch "${BSNG_LOGFILE}"

dbg_msg $"BashStyle-NG Starting"
dbg_msg $"BashStyle-NG Bash Major Version:" "${BASH_VERSINFO[0]}"
dbg_msg $"BashStyle-NG Bash Minor Version:" "${BASH_VERSINFO[1]}"
dbg_msg $"BashStyle-NG Bash Patch Level:" "${BASH_VERSINFO[2]}"
dbg_msg $"BashStyle-NG Version:" "${BSNG_VERSION}"
dbg_msg $"BashStyle-NG Prefix:" "${BSNG_PREFIX}"
dbg_msg $"BashStyle-NG Logfile:" "${BSNG_LOGFILE}"
dbg_msg $"BashStyle-NG Ini Version:" "${INI_VERSION}"

bashstyle-config-helper --update >/dev/null

dbg_log shopt -s checkwinsize

if [ ! -z $(ini_get path) ]; then
	dbg_msg $"BashStyle-NG Setting:" PATH "${PATH}"
	PATH="$(ini_get path)"
fi

[[ ${PATH} != *games* && -d /usr/games/ ]] && \
	export PATH="${PATH}:/usr/games:/usr/local/games"

[[ ${PATH} != *${HOME}/bin* && -d ${HOME}/bin ]] && \
	export PATH="${PATH}:${HOME}/bin"

bt $(ini_get path_wd) && export PATH="${PATH}:."

bt $(ini_get enable_colors) && \
	dbg_log source ${BSNG_RCDIR}/settings_color

[ $(bt $(ini_get use_lscolors)) -a $(bt $(ini_get enable_colors)) ] && \
	dbg_log source ${BSNG_RCDIR}/settings_ls

bt $(ini_get use_readlinecfg) && \
	dbg_log source ${BSNG_RCDIR}/settings_readline

bt $(ini_get use_vimcfg) && \
	dbg_log source ${BSNG_RCDIR}/settings_vim

bt $(ini_get use_nanocfg) && \
	dbg_log source ${BSNG_RCDIR}/settings_nano

bt $(ini_get use_gitcfg) && \
	dbg_log source ${BSNG_RCDIR}/settings_git

bt $(ini_get use_keybindingscfg) && \
	dbg_log source ${BSNG_RCDIR}/settings_keybindings

bt $(ini_get less_termcap_color) && \
	dbg_log source ${BSNG_RCDIR}/settings_man

dbg_msg $"BashStyle-NG Setting:"  Shopts
dbg_log source ${BSNG_RCDIR}/settings_shopt

dbg_log source ${BSNG_RCDIR}/settings_alias

if [[ -e ${HOME}/.bashstyle.custom ]]; then
	dbg_msg $"BashStyle-NG Loading:" $"Custom Settings"
	dbg_log source "${HOME}"/.bashstyle.custom
fi

if bt $(ini_get use_bashstyle); then
	dbg_msg $"BashStyle-NG Loading:" BashStyle-NG
	dbg_log source ${BSNG_RCDIR}/styles_hook

	if [[ ${BSNG_BASHVER} -ge 44 && ! -z $(ini_get ps0) ]]; then
		dbg_msg $"BashStyle-NG Setting:" PS0 "$(ini_get ps0)"
		PS0="${color_ps0} $(ini_get ps0)${color_font} "
	fi

	dbg_msg $"BashStyle-NG Setting:" PS2 "$(ini_get ps2)"
	PS2="${color_ps2} $(ini_get ps2)${color_font} "

	dbg_msg $"BashStyle-NG Setting:" PS3 "$(ini_get ps3)"
	PS3="${color_ps3} $(ini_get ps3)${color_font} "

	dbg_msg $"BashStyle-NG Setting:" PS4 "$(ini_get ps4)"
	PS4="${color_ps4} $(ini_get ps4)${color_font} "

	if bt $(ini_get random_style); then
		dbg_msg $"BashStyle-NG Setting:" $"Random Prompt"

		number=$(random -r 11)
		case ${number} in
			0 ) pstyle=separator ;;
			1 ) pstyle=vector ;;
			2 ) pstyle=clock ;;
			3 ) pstyle=equinox ;;
			4 ) pstyle=elite ;;
			5 ) pstyle=poweruser ;;
			6 ) pstyle=dirks ;;
			7 ) pstyle=dot_prompt ;;
			8 ) pstyle=sepa_ng ;;
			9 ) pstyle=quirk ;;
			10 ) pstyle=sputnik ;;
			11 ) pstyle=ayoli ;;
		esac

		dbg_msg $"BashStyle-NG Setting:" ${pstyle} $"randomly chosen"
	else
		pstyle=$(ini_get prompt_style)
		if [[ ${pstyle} == clock-ad ]]; then
			dbg_msg $"Clock Advanced prompt style is deprecated, changing to Equinox"
			pstyle="equinox"
			ini_set prompt_style equinox
		fi
	fi

	if bt $(ini_get use_custom_prompt); then
		dbg_msg $"BashStyle-NG Setting:" $"Custom" Prompt
		dbg_log source ${BSNG_RCDIR}/styles_custom
	elif [[ -e ${BSNG_RCDIR}/styles_${pstyle} ]]; then
		dbg_msg $"BashStyle-NG Setting:" ${pstyle} Prompt
		dbg_log source ${BSNG_RCDIR}/styles_${pstyle}
	else
		dbg_msg $"BashStyle-NG Setting:" $"Fallback" Prompt
		dbg_log export PS1="\u@\h\w: "
	fi
fi

dbg_log source ${BSNG_RCDIR}/settings_options

# do trapping stuff

if [ $(bt $(ini_get colorshell)) -a $(bt $(ini_get enable_colors)) ]; then
	dbg_msg $"Add colorshell to DEBUG trap"
	bashstyle-trap-add 'bashstyle-colorshell' DEBUG

	if bt $(ini_get colorshell_reset); then
		dbg_msg $"Add colorshell-reset to DEBUG trap"
		bashstyle-trap-add 'bashstyle-colorshell-reset' DEBUG
	fi
fi

# remember last exit status and command

if [[ ${TERM} != *xterm* ]]; then
	return_good="+"
	return_bad="-"
	return_other="/"
else
	if [[ ! -z $(ini_get return_good) ]]; then
		return_good="$(ini_get return_good)"
	else	return_good="✔"
	fi

	if [[ ! -z $(ini_get return_bad) ]]; then
		return_bad="$(ini_get return_bad)"
	else	return_bad="✘"
	fi

	if [[ ! -z $(ini_get return_other) ]]; then
		return_other="$(ini_get return_other)"
	else	return_other="⊘"
	fi
fi

if [[ $(ini_get user_birthday) == $(date +%m-%d) ]]; then
	cat ${BSNG_RCDIR}/internal_birthday
elif [[ ! -z $(ini_get welcome_message) ]]; then
	dbg_msg $"BashStyle-NG Setting:" $"Welcome Message"
	dbg_log $(ini_get welcome_message)
fi

if bt $(ini_get history_isolate); then
	dbg_msg $"BashStyle-NG Setting:" $"History Isolation" $"On"
	dbg_log unset HISTFILE
	dbg_log set +o history
	dbg_log enable -n history
else
	alias history=bashstyle-history
fi

unset style

if bt $(ini_get history_sync); then
	dbg_msg $"Add history syncronization to DEBUG trap"
	bashstyle-trap-add 'bashstyle-history-sync' DEBUG
fi

dbg_msg $"Add remember command to DEBUG and ERR trap"
bashstyle-trap-add 'bashstyle-remember-command-debug' DEBUG
bashstyle-trap-add 'bashstyle-remember-command-error' ERR

lastcommand=""
lastcommandprintable="                     "
lastexit=0

dbg_finalize

unalias bt
unalias bf

unset TEXTDOMAIN
export BSNG_TRAP_RECORD=True
