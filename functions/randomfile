#!/bin/bash
#########################################################
# 							#
# This is BashStyle-NG					#
#							#
# Licensed under GNU GENERAL PUBLIC LICENSE v3    	#
#							#
# Copyright 2007 - 2019 Christopher Bratusek		#
#							#
#########################################################

. gettext.sh
export TEXTDOMAIN="bashstyle-rc"

_randomfunc() {
	command=""

	if [ $# -lt 2 ] || [[ ! "$*" =~ [[:space:]]--[[:space:]] ]];then
			echo "$(eval_gettext "invalid syntax")" >&2; exit 1
	fi

	if [[ "${1}" == "_zero_" ]]; then
		ZERO_DELIMITER=true
		shift
	else	ZERO_DELIMITER=false
	fi

	until [[ ${1} =~ -- ]]; do
		command="$command $1"; shift
	done
	shift
	shift

	if [[ ! "${*}" ]]; then
		files=(*)
	else	files=("${@}")
	fi

	n=${#files[@]}
	RANDOMFILE="${files[RANDOM % n]}"

	case "${command}" in
		*_repeat_*)	echo "${RANDOMFILE}" >> /tmp/randomtmp ;;
		*_print_*)	echo "${RANDOMFILE}" | tee -a "${HOME}/.randomhistory";;
		*)		echo "${RANDOMFILE}" >> "${HOME}/.randomhistory"
				if [[ "${ZERO_DELIMITER}" == "true" ]]; then
					${command}"${RANDOMFILE}"
				else	${command} "${RANDOMFILE}"
				fi
		;;
	esac
}

_randomfile_help () {
	bashstyle-help -a "Christopher Roy Bratusek" -e "nano@jpberlin.de" -h "https://www.nanolx.org/"\
		-l "GNU GPL v3" -n "randomfile" -s "$(eval_gettext "run a command on a random file")"\
		-v "${BSNG_VERSION}" -y "${BSNG_YEAR}"\
		-o "$(eval_gettext "command:|command to run for file")"\
		-o "$(eval_gettext "--:|end of command")"\
		-o "$(eval_gettext "files:|list of possible files")"\
		-o "$(eval_gettext "\tor:|--")"\
		-o "$(eval_gettext "-z:command|command to run for file, append result without space")"\
		-o "$(eval_gettext "--:|end of command")"\
		-o "$(eval_gettext "files:|list of possible files")"\
		-o "$(eval_gettext "\tor:|--")"\
		-o "$(eval_gettext "-f:|print first entry of random history")"\
		-o "$(eval_gettext "-L:|print last entry of random history")"\
		-o "$(eval_gettext "-i:decimal|print nth entry of random history")"\
		-o "$(eval_gettext "-l:|print number of entries in random history")"\
		-o "$(eval_gettext "-c:|clear random history")"\
		-o "$(eval_gettext "\tor:|--")"\
		-o "$(eval_gettext "-n:decimal|repeat process n times")"\
		-o "$(eval_gettext "--:|delimiter")"\
		-o "$(eval_gettext "files:|for given files and print result")"\
		-o "$(eval_gettext "\tor:|--")"\
		-o "$(eval_gettext "-p:|only print result")"\
		-o "$(eval_gettext "--:|delimiter")"\
		-o "$(eval_gettext "files:|for given files and print result")"
}

case ${1} in
	--help | -h | "")
		_randomfile_help
	;;

	-f | --first)
		[[ -f ${HOME}/.randomhistory ]] && \
			sed -n '1p' "${HOME}"/.randomhistory || \
			echo "$(eval_gettext "no 'randomfile' history available")"
	;;

	-L | --last)
		[[ -f ${HOME}/.randomhistory ]] && \
			sed -n '$p' "${HOME}"/.randomhistory || \
			echo "$(eval_gettext "no 'randomfile' history available")"
	;;

	-i | --item)
		[[ -f ${HOME}/.randomhistory ]] && \
			sed -n "${2}p" "${HOME}"/.randomhistory || \
			echo "$(eval_gettext "no 'randomfile' history available")"
	;;

	-l | --length)
		[[ -f ${HOME}/.randomhistory ]] && \
			wc -l "${HOME}"/.randomhistory | gawk '{print $1}' || \
			echo "$(eval_gettext "no 'randomfile' history available")"
	;;

	-c | --clear)
		rm -f "${HOME}"/.randomhistory
	;;

	-n | --count)
		shift
		count=$1
		shift

		while test "${count}" -gt 0; do
			_randomfunc _repeat_ -- "${@}"
			count=$((count-1))
		done

		sort /tmp/randomtmp | uniq -c | sort -n | tail | sort -nr
		rm /tmp/randomtmp
	;;

	-p | --print)
		shift
		_randomfunc _print_ -- "${@}"
	;;

	-z | --zero)
		shift
		_randomfunc _zero_ "${@}"
	;;

	*)
		_randomfunc "${@}"
	;;
esac
